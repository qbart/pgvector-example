package ui

templ DocumentsIndex(page DocumentsIndexPage) {
<div class="container mx-auto px-4 py-8 md:px-6 md:py-12">
  <div class="flex flex-col items-center gap-6">
    <h1 class="text-3xl font-bold tracking-tight sm:text-4xl md:text-5xl">Search</h1>
    <form class="w-full max-w-lg" action="/documents" method="GET">
      <input
        name="q"
        class="flex bg-background py-2 ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 h-12 w-full rounded-lg border border-gray-300 px-4 text-lg focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary dark:border-gray-700 dark:bg-gray-900 dark:text-white"
        placeholder="Search for pages, documents, and more..."
        value={page.Query}
        type="search"
      />
    </form>
  </div>
  if page.Answer != "" {
  <div class="mt-10">
    @templ.Raw(page.Answer)
  </div>
  }
  <div class="mt-10 grid gap-6">
    for _, doc := range page.Documents {
        <div class="flex items-start gap-4 rounded-lg border border-gray-200 bg-white p-4 shadow-sm transition-colors hover:border-primary dark:border-gray-800 dark:bg-gray-950 dark:hover:border-primary">
        <div class="shrink-0">
            <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="h-8 w-8 text-primary"
            >
            <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path>
            <path d="M14 2v4a2 2 0 0 0 2 2h4"></path>
            </svg>
        </div>
        <div class="flex-1">
            <div class="flex items-center justify-between">
            <h3 class="text-lg font-medium">{doc.Title} [page: {doc.Page}, chunk: {doc.Chunk}]</h3>
            <div class="text-sm text-gray-500 dark:text-gray-400">
              if doc.AcceptableScore {
                <span class="inline-flex items-center rounded-full bg-green-50 px-2 py-1 text-xs font-medium text-green-700 ring-1 ring-inset ring-green-600/20">
                  {doc.Score}
                </span>
              } else {
                <span class="inline-flex items-center rounded-full bg-pink-50 px-2 py-1 text-xs font-medium text-pink-700 ring-1 ring-inset ring-pink-700/10">
                  {doc.Score}
                </span>
              }
            </div>
            </div>
            <p class="mt-2 text-gray-500 dark:text-gray-400">
              ...{doc.Content}...
            </p>
        </div>
        </div>
    }
  </div>
</div>
}